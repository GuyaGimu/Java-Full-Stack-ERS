package com.guya.services;

import com.guya.DAOs.ReimbursementDAO;
import com.guya.DAOs.UserDAO;
import com.guya.models.DTOs.IncomingUserDTO;
import com.guya.models.DTOs.OutgoingUserDTO;
import com.guya.models.Reimbursement;
import com.guya.models.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class UserService {
    private final UserDAO userDAO;
    private final ReimbursementDAO reimbursementDAO;

    @Autowired
    public UserService(UserDAO userDAO, ReimbursementDAO reimbursementDAO) {
        this.userDAO = userDAO;
        this.reimbursementDAO = reimbursementDAO;
    }


    //Insert a new user into the DB
    public User insertUser(User user){

        //ToDo: make sure the userDTO fileds are present and valid
        //TODO: make sure the incoming username is unique

        if(user.getFirstName()== null || user.getFirstName().isBlank()){
            throw new IllegalArgumentException("User First Name can't be null or empty");
        }

        if(user.getLastName()== null || user.getLastName().isBlank()){
            throw new IllegalArgumentException("User Last Name can't be null or empty");
        }

        if(user.getUsername()== null || user.getUsername().isBlank()){
            throw new IllegalArgumentException("User Username can't be null or empty");
        }

        if(user.getPassword()== null || user.getPassword().isBlank()){
            throw new IllegalArgumentException("User Password can't be null or empty");
        }

        if (userDAO.existsByUsername(user.getUsername())) {
            throw new IllegalArgumentException("Username is already taken");
        }
        //we need to turn the userDTO into a user (DAO takes a user object)
        //userId will be autogenerated, so 0 is fine for now
        return userDAO.save(user);
    }
    public List<OutgoingUserDTO> getAllUser(){

        //problem: findAll () return aList of Users. we need a list of OutgoingDTO
        //Solution: Loop through the user list and make a new List of DTOS

        //Emppty List of OutgoingUserDTOs to be filled below
        List<OutgoingUserDTO> outgoingUsers = new ArrayList<>();

        //Get all users from DG

        List<User> users = userDAO.findAll();

        //Loop through the Users, adding a new DTO  for each record

        for(User user: users){
            //add a new DTO to the ArrayList Using the all- args constructor from the DTO

            outgoingUsers.add(new OutgoingUserDTO(
                    user.getUserId(),
                    user.getFirstName(),
                    user.getLastName(),
                    user.getUsername(),
                    user.getRole()
            ));
        }
        return outgoingUsers;
    }

    public void deleteUser(int userId){
        if(!userDAO.existsById(userId)){
            throw new IllegalArgumentException("User with ID " +userId +"not found");
        }
        userDAO.deleteById(userId);
    }

    public User promoteToManager(int userId){
        User user = userDAO.findById(userId).orElseThrow();
        user.setRole("Manager");
        return userDAO.save(user);
    }
}
