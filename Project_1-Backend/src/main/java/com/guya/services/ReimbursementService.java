package com.guya.services;

import com.guya.DAOs.ReimbursementDAO;
import com.guya.DAOs.UserDAO;
import com.guya.models.DTOs.IncomingReimbursementDTO;
import com.guya.models.Reimbursement;
import com.guya.models.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ReimbursementService {

    private final ReimbursementDAO reimbursementDAO;
    private final UserDAO userDAO;

    @Autowired
    public ReimbursementService(ReimbursementDAO reimbursementDAO, UserDAO userDAO) {
        this.reimbursementDAO = reimbursementDAO;
        this.userDAO = userDAO;
    }

   // @Autowired

    public Reimbursement createReimbursement(IncomingReimbursementDTO  reimbursementDTO){

        //ToDo: make sure the userDTO fileds are present and valid
        //TODO: make sure the incoming username is unique


        //we need to turn the userDTO into a user (DAO takes a user object)
        //userId will be autogenerated, so 0 is fine for now
        //The other columns comes from the DTO
        //reimbursement will be set using the reimbId from the DTO (find by ID)
        Reimbursement reimbursement = new Reimbursement(0,
                reimbursementDTO.getDescription(),
                reimbursementDTO.getAmount(),
                reimbursementDTO.getStatus(),
                null);

        Optional<User> user = userDAO.findById(reimbursementDTO.getUserId());

        //if the  Reimbursement is not present , throw an exception
        if(user.isEmpty()){
            throw new IllegalArgumentException("No User  with ID " +reimbursementDTO.getUserId());
        } else {
            // if the reimbursement is present, set the user's reimbursement to the found reimbursement
            // .get() is the method we use to extract values from Optionals

            reimbursement.setUser(user.get());

            //finally, we can send the userto the DAO
            return reimbursementDAO.save(reimbursement);

        }
    }


    //Inserts new Reimbursement into the DB once they have been validated
    public Reimbursement createReimbursement(Reimbursement reimbursement){

        if(reimbursement.getDescription()== null || reimbursement.getDescription().isBlank()){
            throw new IllegalArgumentException("Reimbursement description can't be null or empty");
        }

        if(reimbursement.getAmount() < 0){
            throw new IllegalArgumentException("Reimbursement amount can not be negative");
        }

        //if none of this get triggered, then the  reimbursement is valid

        return reimbursementDAO.save(reimbursement);
    }

    //This method gets all reimbursement from the DB
    public List<Reimbursement> getAllReimbursement(){

        return reimbursementDAO.findAll();
    }

    //Gets Reimbursement by Status
    public List<Reimbursement> findByReimbursementStatus(String status){

        if(status ==null || status.isBlank()){
            throw new IllegalArgumentException("status can't be null or blank");
        }

        //Getting the list of Reimbursement
        return reimbursementDAO.findByStatus(status);
    }

    //If it is not working the problem could be her, coz I made some changes here
    public  Reimbursement getReimbursementByUser(IncomingReimbursementDTO  incomingReimbursementDTO){


        return reimbursementDAO.findById(incomingReimbursementDTO.getUserId())
              .orElseThrow(() -> new RuntimeException("Reimbursement not found for user ID: " + incomingReimbursementDTO.getUserId()));
   }


    public List<Reimbursement> getAllPendingReimbursements(){

        return reimbursementDAO.findByStatus("PENDING");
    }

    public void resolveReimbursement(int reimbId,String status){

        Reimbursement reimbursement =reimbursementDAO.findById(reimbId)
                .orElseThrow(() -> new RuntimeException("Reimbursement not found"));
        reimbursement.setStatus(status);
        reimbursementDAO.save(reimbursement);
    }
    public List<Reimbursement> getReimbursementsByUserId(int userId) {
        return reimbursementDAO.findByUserId(userId);
    }
}